README

PrettyPrint is great for making generic data structures easy on the eyes but PPing ORMed data is a sure way to get overwhelmed by unnecessary and redundant information. Not only does the @old_value_attributes hash (which is part of every ActiveRecord object) make it hard to find what you’re looking for, but the ‘key => value’ format isn’t optimal for viewing relational data. So what is optimal?

I find myself resorting to psql every time I need to display something from the DB in an organized fashion only because tabular formatting will always work well for relational data sets.

Meet PP2, the little pretty printer for ActiveRecord. 

Formatters

When you ‘pp2′ an AR object it looks for a formatter definition in that object’s class. The formatter is a hash which defines the fields and associations you want to print when displaying an object of a particular class. If one is not present a default formatter will be generated and used to display the data. More on default formatters later. Here is a sample formatter definition:

class Loan
...

  @@pp2_format = 
    {:fields => [
      { :title => 'Brand', :column => 'brand.code' },
      { :title => 'Funding Date', :column => 'funding_date' },
      { :title => 'Due Date', :column => 'due_date' },
      { :title => 'Status', :column => 'status_cd' },
      { :title => 'Reason', :column => 'status_reason' },
      { :title => 'Amount', :column => 'amount', :format => "$%s" },
      { :title => 'Fees', :column => 'fee_amount', :format => "$%s" },
      { :title => 'Interest Rate', :column => 'interest_rate', :format => "%s%%" }],
     :associations => [ 
       {:name => 'installments', :sort => 'installment_number' }]}

...
end

Each field has a title, column, width, and format string. The column name is required, the rest is optional. Here’s what the keys define:

:title – title to display in the table header for the specific field
:column – method to call on the AR object (doesn’t have to be a column in the db)
:width – the minimum width you want this field to be
:format – advanced formating, same as sprintf. The first %s will eat up the data returned by the AR object.

The associations array defines the names of all AR associations that you might want to display along with the object you chose to pretty print. Associations aren’t printed by default though, pp2 has to be called with the :assoc_levels argument to print associations. The assoc_levels argument tells pp2 how many levels of associations it should traverse (assuming of course that the child records have @pp2_formats defined with their own associations).

Here’s what the keys in each association hash define:

:name – method to call on the AR object which returns a single or array of AR objects
:sort – method to call on the child AR objects (used to sort pretty printed output)

Default formatters are generated by pp2 for any AR object which doesn’t have an explicit formatter defined. The default formatter comes with no associations, and automatically sets the following parameters:

:max_cols => 10 (outputs the first 10 columns only)
:max_width => 20 (sets the max field width to 20 chars)
:ignore_cols => ['_id', '_on', '_at'] (ignores any column names which include the substrings specified)

The default formatter params can be overwritten by passing them explicitly to pp2.

Usage

pp2(model, opts) where opts is a hash of optional parameters defined below:

Set the depth level for printing model associations
:assoc_levels => ##
Ignore the format defined in the model and build a default formatter
:formatter => :default
The max column width to display (hard cutoff)
:max_width => ##
The max number of columns to display (hard cutoff)
:max_cols => ##
Columns to include (those that contain any of the strings/regexes mentioned)
:select_cols => ['',//]
Columns to ignore (those that contain any of the strings/regexes mentioned)
:reject_cols => ['',//] 
